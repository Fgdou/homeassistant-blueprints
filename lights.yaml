blueprint:
  name: Motion Lights
  description: Turn on and off lights, based on a lot ofconditionss
  domain: automation

  input:
    motion_sensor:
      name: Motion Sensor
      description: Movement detection
      selector:
        entity:
          filter:
            - domain: binary_sensor
    lights:
      name: Lights
      description: The set of lights to turn on and off
      selector:
        entity:
          filter:
            - domain: light
    off_delay:
      name: Off delay
      description: Delay in which to turn off the light after the motion is off
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: "minutes"
      default: 0
    door:
      name: Door
      description: If the door is closed, the light will not turn on / off
      default: [] 
      selector:
        entity:
          filter:
            - domain: binary_sensor
    window:
      name: Window
      description: If the window is open, dim the lights
      default: []
      selector:
        entity:
          filter:
            - domain: binary_sensor
    no_motion_sleep:
      name: No motion when sleeping
      description: Deactivate the motion sensor when sleeping, to not turn on the lights by accident
      default: false
      selector:
        boolean:
    lux:
      name: Lux
      description: Set a light level where the light turns on and off (0 for always on)
      default: 0
      selector:
        number:
          min: 0
          max: 1000
    tv:
      name: Tv
      description: A Tv than control the lights. When the media runs, the lights turns off. When the media pause, the light turns on.
      default: []
      selector:
        entity:
          filter:
            - domain: media_player
    button_on:
      name: Button On
      default: []
      description: A button to turn on the lights
      selector:
        entity:
          filter:
            - domain: input_button
    button_off:
      name: Button Off
      default: []
      description: A button to turn off the lights
      selector:
        entity:
          filter:
            - domain: input_button

mode: restart  
variables:
  lux_value: !input lux
  lux: "{{ states('sensor.luminance_illuminance')|int }}"
  night: "{{ lux_value == 0 or states('sensor.luminance_illuminance')|int < lux_value }}"
  motion_entity: !input motion_sensor
  motion_time: "{{ as_timestamp(now()) - as_timestamp(states[motion_entity].last_changed) }}"
  motion: "{{ states(motion_entity) == 'on' or motion_time <= (off_delay+1)*60  }}"
  motion_half: "{{ states(motion_entity) == 'off' and motion_time >= off_delay*60 and motion_time <= (off_delay+1)*60 }}"
  lights: !input lights
  light_state: "{{ states(lights) == 'on' }}"
  door_entity: !input door
  door_open: "{{ door_entity == [] or states(door_entity) == 'on' and (as_timestamp(now()) - as_timestamp(states[door_entity].last_changed)) > 60 }}"
  window_entity: !input window
  window_open: "{{ window_entity != [] and states(window_entity) == 'on' }}"
  tv_entity: !input tv
  tv_off: "{{ tv_entity == [] or states(tv_entity) == 'unavailable' }}"
  lights_off: "{{ states('input_boolean.lights_off') == 'on' }}"

  sleep: "{{ states.input_boolean.sleep.state == 'on' }}"
  guest: "{{ states.input_boolean.guest.state == 'on' }}"
  no_motion_sleep: !input no_motion_sleep

  always_turn_on: "{{ trigger.id in ['motion_on', 'night_on', 'tv_off'] and motion and night and door_open and tv_off and (not no_motion_sleep or not sleep) or trigger.id == 'button_on' }}"
  update_brightness: "{{ trigger.id in ['window', 'sleep', 'lights_off', 'motion_half', 'tv_on', 'button_on', 'tv_off'] and light_state }}"
  should_turn_on: "{{ always_turn_on or update_brightness }}"
  brightness_semi: >
    {% if trigger.id == 'button_on' and light_state %}
      100
    {% elif window_open or lights_off and lux < 30 or not tv_off or sleep and not guest %}
      1
    {% else %}
      100
    {% endif %}
  brightness: >
    {% if motion_half and brightness_semi >= 10 %}
      {{ brightness_semi * 0.1 }}
    {% else %}
      {{ brightness_semi }}
    {% endif %}
  transition: >
    {% if update_brightness %}
      5
    {% else %}
      0.3
    {% endif %}
 
trigger_variables:
  off_delay: !input off_delay
  lux_value: !input lux

trigger:
  - platform: state
    entity_id: !input motion_sensor
    from: "off"
    to: "on"
    id: "motion_on"  
  - platform: state
    entity_id: !input motion_sensor
    from: "on"
    to: "off"
    for:
      minutes: !input off_delay
    id: "motion_half"
  - platform: state
    entity_id: !input motion_sensor
    from: "on"
    to: "off"
    for:
      minutes: "{{ off_delay + 1 }}"
      seconds: 1
    id: "motion_off"
  - platform: template
    id: "night_on"
    value_template: "{{ states('sensor.luminance_illuminance')|int < lux_value - 5 }}"
  - platform: template
    id: "night_off"
    value_template: "{{ states('sensor.luminance_illuminance')|int > lux_value + 5 }}"
  - platform: state
    entity_id: !input tv
    id: "tv_on"
    from: "unavailable"
  - platform: state
    entity_id: !input tv
    id: "tv_off"
    to: "unavailable"
  - platform: state
    entity_id: !input button_on
    id: "button_on"
  - platform: state
    entity_id: !input button_off
    id: "button_off"
  - platform: state
    entity_id: !input window
    id: "window"
  - platform: state
    entity_id: input_boolean.sleep
    id: "sleep"
  - platform: state
    entity_id: input_boolean.lights_off
    id: "lights_off"

action:
        - choose:
          - conditions:
            - condition: template
              value_template: "{{ trigger.id == 'night_off' and not night or trigger.id == 'motion_off' and door_open or trigger.id == 'button_off' }}"
            sequence:
              - service: light.turn_off
                target: 
                  entity_id: !input lights
                data:
                  transition: 0.3
          - conditions:
            - condition: template
              value_template: "{{ should_turn_on }}"
            sequence:
              - service: light.turn_on
                target: 
                  entity_id: !input lights
                data:
                  transition: "{{ transition }}"
                  brightness_pct: "{{ brightness }}"


