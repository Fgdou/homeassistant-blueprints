blueprint:
  name: Motion Lights
  description: Turn on and off lights, based on a lot ofconditionss
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      description: Movement detection
      selector:
        entity:
          filter:
            - domain: binary_sensor
            - device_class: motion
    lights:
      name: Lights
      description: The set of lights to turn on and off
      selector:
        target:
          entity:
            - domain: light
    off_delay:
      name: Off delay
      description: Delay in which to turn off the light after the motion is off
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: "minutes"
      default: 0
    door:
      name: Door
      description: If the door is closed, the light will not turn on / off
      default: ''
      selector:
        entity:
          filter:
            - domain: binary_sensor
    night:
      name: Night
      description: Do not turn on lights during the day
      default: ''
      selector:
        entity:
          filter:
            - domain: binary_sensor
            - domain: input_boolean
              
variables:
  night: !input night
  motion: !input motion_sensor
  lights: !input lights

trigger:
  - platform: state
    entity_id: !input motion_sensor
    from: "off"
    to: "on"
    id: "motion_on"  
  - platform: state
    entity_id: !input motion_sensor
    from: "on"
    to: "off"
    for:
      minutes: !input off_delay
    id: "motion_off"
  - platform: template
    value_template: "{{ is_state(motion, 'on') or is_state(motion, 'off') }}"
    id: "night"

action:
  - choose:
    - conditions:
        - condition: template
          value_template: "{{ trigger.id == 'motion_on' and states(night) != 'off' and states(door) != 'off' or trigger.id == 'night' and trigger.to_state.state == 'on' and states(motion) == 'on' }}"
      sequence:
        - service: light.turn_on
          target: !input lights
    - conditions:
        - condition: template
          value_template: "{{ trigger.id == 'motion_off' and states(door) != 'off' or trigger.id == 'night' and trigger.to_state.state == 'off' }}" 
      sequence:
        - service: light.turn_off
          target: !input lights
